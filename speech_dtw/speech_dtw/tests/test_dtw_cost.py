"""
Author: Herman Kamper
Contact: h.kamper@sms.ed.ac.uk
Date: 2014
"""

import numpy as np
import numpy.testing as npt

from speech_dtw import _dtw


def test_dp_cost():
    """
    Test by comparing output with that generated by Dan Ellis's Matlab code.

    Some random sequences were generated, a difference matrix was calculated
    and then the sequences were aligned using Dan Ellis' Matlab code. The
    Matlab code can be found at:

    - http://www.ee.columbia.edu/ln/labrosa/matlab/dtw/
    """

    # Input sequences
    s = [
        0.31907989, 0.36886349, 0.88601401, 0.10647894, 0.55568399, 0.03362998,
        0.08154014, 0.29557532, 0.44387983, 0.46424962, 0.83323797, 0.75725261,
        0.9612375 , 0.45526512, 0.52581353, 0.82994492, 0.95958503, 0.81058366,
        0.52815477, 0.28542249, 0.71805045, 0.11559819, 0.86323944, 0.27966765,
        0.16590741, 0.18876726, 0.63849623, 0.26842587, 0.96991667, 0.36573135,
        0.11002549, 0.62467659, 0.14615971, 0.60991811, 0.58880893, 0.66059894,
        0.54244158, 0.11051738]
    t = [
        0.7841284 , 0.38693716, 0.22540918, 0.36019438, 0.22338693, 0.97122249,
        0.39489736, 0.65732219, 0.8382532 , 0.22341524, 0.45894789, 0.40387544,
        0.04906017, 0.92050544, 0.88682675, 0.17118542, 0.96703938, 0.5522097,
        0.45500812, 0.54280973, 0.99330313, 0.40290325, 0.60708765, 0.72397749,
        0.2036831 , 0.11112938, 0.25064554, 0.26799352, 0.25187908]

    # Calculate the distance matrix
    dist_mat = np.zeros((len(s), len(t)))
    for i in range(len(s)):
        for j in range(len(t)):
            dist_mat[i, j] = abs(s[i] - t[j])

    cost = _dtw.dp_cost(dist_mat)
    cost_expected = 6.43207308

    npt.assert_almost_equal(cost, cost_expected)


def test_dtw_cost():

    # Input sequences
    s = [
        0.31907989, 0.36886349, 0.88601401, 0.10647894, 0.55568399, 0.03362998,
        0.08154014, 0.29557532, 0.44387983, 0.46424962, 0.83323797, 0.75725261,
        0.9612375 , 0.45526512, 0.52581353, 0.82994492, 0.95958503, 0.81058366,
        0.52815477, 0.28542249, 0.71805045, 0.11559819, 0.86323944, 0.27966765,
        0.16590741, 0.18876726, 0.63849623, 0.26842587, 0.96991667, 0.36573135,
        0.11002549, 0.62467659, 0.14615971, 0.60991811, 0.58880893, 0.66059894,
        0.54244158, 0.11051738]
    t = [
        0.7841284 , 0.38693716, 0.22540918, 0.36019438, 0.22338693, 0.97122249,
        0.39489736, 0.65732219, 0.8382532 , 0.22341524, 0.45894789, 0.40387544,
        0.04906017, 0.92050544, 0.88682675, 0.17118542, 0.96703938, 0.5522097,
        0.45500812, 0.54280973, 0.99330313, 0.40290325, 0.60708765, 0.72397749,
        0.2036831 , 0.11112938, 0.25064554, 0.26799352, 0.25187908]

    # Calculate the DTW alignment cost
    cost = _dtw.multivariate_dtw_cost(
        np.asarray(np.array([s]).T, order="c"), np.asarray(np.array([t]).T, order="c"), "euclidean"
        )
    cost_expected = 6.43207308

    npt.assert_almost_equal(cost, cost_expected)
